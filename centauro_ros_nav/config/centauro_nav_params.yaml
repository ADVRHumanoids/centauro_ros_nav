bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: pelvis
    odom_topic: odom
    bt_loop_duration: 10
    filter_duration: 0.3
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    action_server_result_timeout: 900.0
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

    # plugin_lib_names is used to add custom BT plugins to the executor (vector of strings).
    # Built-in plugins are added automatically
    # plugin_lib_names: []

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 10.0
    costmap_update_timeout: 0.50
    min_x_velocity_threshold: 0.05
    min_y_velocity_threshold: 0.05
    min_theta_velocity_threshold: 0.01
    failure_tolerance: 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]
    use_realtime_priority: false

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.15
      yaw_goal_tolerance: 0.20
    
    # DWB controller parameters
    # FollowPath:
    #   plugin: "dwb_core::DWBLocalPlanner"
    #   debug_trajectory_details: True
    #   min_vel_x: 0.05
    #   min_vel_y: 0.05
    #   max_vel_x: 0.45
    #   max_vel_y: 0.45
    #   max_vel_theta: 0.35
    #   min_speed_xy: 0.05
    #   max_speed_xy: 0.50
    #   min_speed_theta: 0.05
    #   acc_lim_x: 2.5
    #   acc_lim_y: 2.5
    #   acc_lim_theta: 3.0
    #   decel_lim_x: -2.5
    #   decel_lim_y: -2.5
    #   decel_lim_theta: -3.0
    #   vx_samples: 20
    #   vy_samples: 20
    #   vtheta_samples: 20
    #   sim_time: 5.0
    #   linear_granularity: 0.05
    #   angular_granularity: 0.05
    #   transform_tolerance: 0.2
    #   xy_goal_tolerance: 0.20
    #   trans_stopped_velocity: 0.05
    #   short_circuit_trajectory_evaluation: True
    #   limit_vel_cmd_in_traj: False
    #   stateful: True
    #   critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
    #   BaseObstacle.scale: 0.20
    #   GoalAlign.forward_point_distance: 0.25
    #   GoalAlign.scale: 20.0
    #   PathAlign.forward_point_distance: 0.25
    #   PathAlign.scale: 40.0
    #   PathDist.scale: 30.0
    #   GoalDist.scale: 24.0
    #   RotateToGoal.scale: 25.0
    #   RotateToGoal.slowing_factor: 5.0
    #   RotateToGoal.lookahead_time: -1.0

    FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.5
      lookahead_dist: 0.75
      min_lookahead_dist: 0.35
      max_lookahead_dist: 1.0
      lookahead_time: 2.5
      rotate_to_heading_angular_vel: 0.40
      transform_tolerance: 0.1
      use_velocity_scaled_lookahead_dist: false
      min_approach_linear_velocity: 0.05
      approach_velocity_scaling_dist: 0.5
      use_collision_detection: true
      max_allowed_time_to_collision_up_to_carrot: 1.0
      use_regulated_linear_velocity_scaling: true
      use_fixed_curvature_lookahead: false
      curvature_lookahead_dist: 0.75
      use_cost_regulated_linear_velocity_scaling: false
      regulated_linear_scaling_min_radius: 0.9
      regulated_linear_scaling_min_speed: 0.25
      use_rotate_to_heading: true
      allow_reversing: false
      rotate_to_heading_min_angle: 0.785
      max_angular_accel: 3.0
      max_robot_pose_search_dist: 10.0

local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: True
      update_frequency: 10.0
      publish_frequency: 8.0
      global_frame: map
      robot_base_frame: pelvis
      rolling_window: True
      width: 5
      height: 5
      resolution: 0.05
      # robot_radius: 0.45
      footprint: "[[0.50, 0.40], [0.50, -0.40], [-0.50, -0.40], [-0.50 ,0.40]]"
      footprint_padding: 0.10
      plugins: ["static_layer", "velodyne_voxel_layer", "inflation_layer"]
      velodyne_voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        #publish_voxel_map: False
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        mark_threshold: 0
        observation_sources: velodyne
        velodyne:
          topic: /lidar/points
          max_obstacle_height: 2.5
          min_obstacle_height: 1.0
          obstacle_max_range: 2.5
          raytrace_max_range: 5.0
          #inf_is_valid: False
          clearing: True
          marking: True
          data_type: "PointCloud2"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        # map: "/map"
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 5.5
        inflation_radius: 1.25
      always_send_full_costmap: False
  local_costmap_client:
    ros__parameters:
      use_sim_time: True
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: True
      update_frequency: 2.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: pelvis
      # robot_radius: 0.45
      footprint: "[[0.525, 0.425], [0.525, -0.425], [-0.525, -0.425], [-0.525 ,0.425]]"
      footprint_padding: 0.10
      # height: 15
      # width: 15
      resolution: 0.25
      track_unknown_space: true
      plugins: ["static_layer", "inflation_layer"]
      #obstacle_layer:
      #  plugin: "nav2_costmap_2d::ObstacleLayer"
      #  enabled: True
      #  observation_sources: scan
      #  scan:
      #    topic: /scan
      #    max_obstacle_height: 2.0
      #    clearing: True
      #    marking: True
      #    data_type: "LaserScan"
      static_layer:
        enabled: True
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        # map: "/map"
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 6.5
        inflation_radius: 1.4

      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: True
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
# map_server:
#   ros__parameters:
#     yaml_filename: ""

planner_server:
  ros__parameters:
    use_sim_time: True
    expected_planner_frequency: 10.0
    planner_plugins: ["GridBased"]
    costmap_update_timeout: 1.0
    GridBased:
      plugin: "nav2_navfn_planner::NavfnPlanner"
      tolerance: 0.5
      use_astar: true
      allow_unknown: true

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    use_sim_time: True
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 7.5
    behavior_plugins: ["wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
      max_rotational_vel: 0.25
      min_rotational_vel: 0.1
    backup:
      plugin: "nav2_behaviors::BackUp"
      acceleration_limit: 2.5
      deceleration_limit: -2.5
      minimum_speed: 0.10
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
      acceleration_limit: 2.5
      deceleration_limit: -2.5
      minimum_speed: 0.10
    wait:
      plugin: "nav2_behaviors::Wait"
    local_frame: odom
    global_frame: map
    robot_base_frame: pelvis
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.25
    min_rotational_vel: 0.025
    rotational_acc_lim: 2.0

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

# velocity_smoother:
#   ros__parameters:
#     use_sim_time: True
#     smoothing_frequency: 20.0
#     scale_velocities: False
#     feedback: "OPEN_LOOP"
#     max_velocity: [0.5, 0.0, 2.0]
#     min_velocity: [-0.5, 0.0, -2.0]
#     max_accel: [2.5, 0.0, 3.2]
#     max_decel: [-2.5, 0.0, -3.2]
#     odom_topic: "odom"
#     odom_duration: 0.1
#     deadband_velocity: [0.0, 0.0, 0.0]
#     velocity_timeout: 1.0

# collision_monitor:
#   ros__parameters:
#     use_sim_time: True
#     base_frame_id: "pelvis"
#     odom_frame_id: "odom"
#     cmd_vel_in_topic: "cmd_vel_smoothed"
#     cmd_vel_out_topic: "cmd_vel"
#     state_topic: "collision_monitor_state"
#     transform_tolerance: 0.2
#     source_timeout: 1.0
#     base_shift_correction: True
#     stop_pub_timeout: 2.0
#     # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
#     # and robot footprint for "approach" action type.
#     polygons: ["FootprintApproach"]
#     FootprintApproach:
#       type: "polygon"
#       action_type: "approach"
#       footprint_topic: "local_costmap/published_footprint"
#       time_before_collision: 1.2
#       simulation_time_step: 0.1
#       min_points: 6
#       visualize: False
#       enabled: True
#     observation_sources: ["scan"]
#     scan:
#       type: "scan"
#       topic: "scan"
#       min_height: 0.15
#       max_height: 2.0
#       enabled: True